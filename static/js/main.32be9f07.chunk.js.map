{"version":3,"sources":["GlobalStyle.js","features/tasks/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/styledButton.js","features/tasks/Buttons/index.js","features/tasks/ButtonExampleTasks/index.js","common/Container/Section/styled.js","common/Container/Section/index.js","common/Container/Header/styled.js","common/Container/Header/index.js","common/Container/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","StyledForm","styled","form","white","breakpoint","mobileMax","Input","input","Button","button","teal","localStorageKey","saveTasksinLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","buttonState","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","forEach","fetchExampleTasks","setTasks","actions","selectTasksState","selectTasks","selectHideDone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","selectButtonState","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","newTaskContentTrimed","trim","content","nanoid","current","focus","value","onChange","target","ref","placeholder","List","ul","Item","li","hidden","css","Content","span","mineshaft","toggleDone","forestGreen","remove","crimson","TaskList","useSelector","map","onClick","className","Wrapper","div","silver","Buttons","isEveryTaskDone","areTasksEmpty","disabled","ButtonExampleTasks","section","Header","h2","Section","title","body","extraHeaderContent","StyledHeader","header","Container","children","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksinLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeEvery","type","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","black","alto","document","getElementById"],"mappings":"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","file":"static/js/main.32be9f07.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n        scroll-behavior: smooth;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        max-width: 1000px;\r\n        margin: 0 auto;\r\n        padding: 0 20px;\r\n        font-family: 'Montserrat', sans-serif;\r\n        background-color: ${({ theme }) => theme.color.gallery};\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 10px;\r\n    padding: 20px;\r\n    margin: 2px 5px;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px){\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 8px;\r\n    border: 1px solid ${({ theme }) => theme.color.gallery};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 8px;\r\n    border: none;\r\n    background-color:  ${({ theme }) => theme.color.teal};\r\n    color:  ${({ theme }) => theme.color.gallery};\r\n    cursor: pointer;\r\n    transition: background-color .5s linear, transform .2s linear;\r\n\r\n    &:hover{\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksinLocalStorage = tasks =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n        buttonState: true,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n        setAllDone: ({ tasks }) => {\r\n            tasks.forEach(task => task.done = true);\r\n        },\r\n        fetchExampleTasks: (state) => {\r\n            state.buttonState = false;\r\n        },\r\n        setTasks: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n            state.buttonState = true;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    addTask,\r\n    toggleHideDone,\r\n    toggleTaskDone,\r\n    removeTask,\r\n    setAllDone,\r\n    fetchExampleTasks,\r\n    setTasks,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\r\nexport const selectButtonState = state => selectTasksState(state).buttonState;\r\n\r\nexport default tasksSlice.reducer;\r\n\r\n","import { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newTaskContentTrimed = newTaskContent.trim();\r\n\r\n        if (!newTaskContentTrimed) {\r\n            return;\r\n        };\r\n\r\n        dispatch(addTask({\r\n            content: newTaskContentTrimed,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                ref={inputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    padding: 20px;\r\n    margin: 2px 5px;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    list-style-type: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 2px solid #eee;\r\n    margin-bottom: 10px;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    color: ${({ theme }) => theme.color.mineshaft};\r\n    overflow-wrap: anywhere;\r\n    word-break: break-word;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    margin-right: 10px;\r\n    color: ${({ theme }) => theme.color.gallery};\r\n    border: none;\r\n    width: 30px;\r\n    height: 30px;\r\n    font-size: 10px;\r\n    cursor: pointer;\r\n    transition: background-color .5s linear;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`   \r\n        background-color: ${({ theme }) => theme.color.forestGreen};\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(130%);\r\n        }\r\n    `}\r\n        \r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.crimson};\r\n\r\n        &:hover{\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:active{\r\n            filter: brightness(130%);\r\n        }\r\n    `}   \r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, selectHideDone, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n    const tasks = useSelector(selectTasks);\r\n    const hideDone = useSelector(selectHideDone);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {\r\n                tasks.map(task => (\r\n                    <Item\r\n                        key={task.id}\r\n                        hidden={task.done && hideDone}\r\n                    >\r\n                        <Button\r\n                            toggleDone\r\n                            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                        >\r\n                            {task.done\r\n                                ? <i className='fas fa-check'></i>\r\n                                : \"\"}\r\n                        </Button>\r\n                        <Content\r\n                            done={task.done}\r\n                        >\r\n                            {task.content}\r\n                        </Content>\r\n                        <Button\r\n                            remove\r\n                            onClick={() => dispatch(removeTask(task.id))}\r\n                        >\r\n                            <i className=\"fas fa-trash-alt\"></i>\r\n                        </Button>\r\n                    </Item>\r\n                ))\r\n            }\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-direction: column;\r\n        padding: 30px;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.teal};\r\n    font-size: 18px;\r\n    border: none;\r\n    background-color: transparent;\r\n    transition: color .5s linear;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        padding: 10px;\r\n    }\r\n\r\n    &:hover{\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active{\r\n        filter: brightness(130%);\r\n    }\r\n\r\n    &:disabled{\r\n        color: ${({ theme }) => theme.color.silver};\r\n        pointer-events: none; \r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectHideDone, selectIsEveryTaskDone, selectAreTasksEmpty, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\nimport { Wrapper, Button } from \"../styledButton\";\r\n\r\nconst Buttons = () => {\r\n    const hideDone = useSelector(selectHideDone);\r\n    const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n    const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>\r\n            {!areTasksEmpty && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                    >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={isEveryTaskDone}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { fetchExampleTasks, selectButtonState } from \"../tasksSlice\";\r\nimport { Button, Wrapper } from \"../styledButton\";\r\n\r\nconst ButtonExampleTasks = () => {\r\n    const buttonState = useSelector(selectButtonState);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>\r\n            {buttonState ?\r\n                (\r\n                    <Button onClick={() => dispatch(fetchExampleTasks())}>\r\n                        Pobierz przykładowe zadania\r\n                    </Button>\r\n                ) :\r\n                (\r\n                    <Button disabled>\r\n                        Ładowanie\r\n                    </Button>\r\n                )\r\n            }\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default ButtonExampleTasks;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin-top: 10px;\r\n    box-shadow: 0 0 3px ${({ theme }) => theme.color.gallery};\r\n`;\r\n\r\nexport const Header = styled.h2`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 15px;\r\n    margin: 2px 5px;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px){\r\n        flex-direction: column;\r\n    }\r\n`;","import { Wrapper, Header } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Wrapper>\r\n    <Header>\r\n      {title}\r\n      {extraHeaderContent}\r\n    </Header>\r\n    {body}\r\n  </Wrapper>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.header`\r\n    margin: 0px 5px;\r\n`;","import {StyledHeader} from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <StyledHeader>\r\n        <h1>{title}</h1>\r\n    </StyledHeader>\r\n)\r\n\r\nexport default Header;","const Container = ({ children }) => (\r\n    <main>\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Buttons from \"./Buttons\";\r\nimport ButtonExampleTasks from \"./ButtonExampleTasks\";\r\nimport Section from \"../../common/Container/Section\";\r\nimport Header from \"../../common/Container/Header\";\r\nimport Container from \"../../common/Container\";\r\n\r\nconst Tasks = () => (\r\n  <>\r\n    <Header title=\"Lista zadań\" />\r\n    <Container>\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form />}\r\n        extraHeaderContent={<ButtonExampleTasks />}\r\n      />\r\n\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={<TaskList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </Container>\r\n  </>\r\n);\r\n\r\nexport default Tasks;\r\n","import Tasks from \"./features/tasks/Tasks\"\r\n\r\nexport const App = () => <Tasks />;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText)\r\n    }\r\n\r\n    return await response.json();\r\n};","import { takeEvery, call, put, delay, select } from \"redux-saga/effects\";\r\nimport { fetchExampleTasks, setTasks, selectTasks } from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksinLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(2000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(setTasks(exampleTasks));\r\n    } catch (error) {\r\n        yield call(alert, \"Coś poszło nie tak\");\r\n    };\r\n};\r\n\r\nfunction* saveTasksinLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksinLocalStorage, tasks);\r\n};\r\n\r\nexport function* tasksSaga() {\r\n    yield takeEvery(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksinLocalStorageHandler);\r\n};","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n};","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyle } from './GlobalStyle';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        mineshaft: \"#333\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}