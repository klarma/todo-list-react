{"version":3,"sources":["GlobalStyle.js","useTasks.js","useLocalStorageState.js","features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styled.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Container/Section/styled.js","common/Container/Section/index.js","common/Container/Header/styled.js","common/Container/Header/index.js","common/Container/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","store.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","useTasks","keyName","initialValue","useState","JSON","parse","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorageState","tasks","setTasks","removeTask","id","filter","task","toggleTaskDone","map","done","setAllDone","addNewTask","content","length","StyledForm","styled","form","white","breakpoint","mobileMax","Input","input","Button","button","teal","tasksSlice","createSlice","name","initialState","hideDone","reducers","addTask","payload","push","toggleHideDone","actions","selectTasks","Form","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","newTaskContentTrimed","trim","nanoid","current","focus","value","onChange","target","ref","placeholder","List","ul","Item","li","hidden","css","Content","span","mineshaft","toggleDone","forestGreen","remove","crimson","TaskList","useSelector","onClick","className","Wrapper","div","silver","Buttons","disabled","every","section","Header","h2","Section","title","body","extraHeaderContent","StyledHeader","header","Container","children","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","black","alto","document","getElementById"],"mappings":"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","file":"static/js/main.68d991a5.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n        scroll-behavior: smooth;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        max-width: 1000px;\r\n        margin: 0 auto;\r\n        padding: 0 20px;\r\n        font-family: 'Montserrat', sans-serif;\r\n        background-color: ${({ theme }) => theme.color.gallery};\r\n    }\r\n`;","import { useLocalStorageState } from \"./useLocalStorageState\";\r\n\r\nconst useTasks = () => {\r\n    const [tasks, setTasks] = useLocalStorageState(\"tasks\", []);\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id));\r\n    };\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done };\r\n            };\r\n\r\n            return task;\r\n        }))\r\n    };\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task => ({\r\n            ...task,\r\n            done: true,\r\n        })));\r\n    };\r\n\r\n    const addNewTask = (content) => {\r\n        setTasks(tasks => [\r\n            ...tasks,\r\n            {\r\n                content,\r\n                done: false,\r\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n            },\r\n        ]);\r\n    };\r\n\r\n    return {\r\n        tasks,\r\n        removeTask,\r\n        toggleTaskDone,\r\n        setAllDone,\r\n        addNewTask,\r\n    };\r\n};\r\n\r\nexport { useTasks };","import { useEffect, useState } from 'react';\r\n\r\nexport const useLocalStorageState = (keyName, initialValue) => {\r\n    const getInitialState = () => {\r\n        return JSON.parse(localStorage.getItem(keyName)) || initialValue;\r\n    };\r\n\r\n    const [state, setState] = useState(getInitialState);\r\n\r\n    useEffect((keyName) => {\r\n        localStorage.setItem(keyName, JSON.stringify(state));\r\n    }, [state]);\r\n\r\n    return [state, setState];\r\n};","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 10px;\r\n    padding: 20px;\r\n    margin: 2px 5px;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px){\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 8px;\r\n    border: 1px solid ${({ theme }) => theme.color.gallery};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 8px;\r\n    border: none;\r\n    background-color:  ${({ theme }) => theme.color.teal};\r\n    color:  ${({ theme }) => theme.color.gallery};\r\n    cursor: pointer;\r\n    transition: background-color .5s linear, transform .2s linear;\r\n\r\n    &:hover{\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: (state) => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addTask, toggleHideDone } = tasksSlice.actions;\r\nexport const selectTasks = state => state.tasks;\r\nexport default tasksSlice.reducer;\r\n\r\n","import { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newTaskContentTrimed = newTaskContent.trim();\r\n\r\n        if (!newTaskContentTrimed) {\r\n            return;\r\n        };\r\n\r\n        dispatch(addTask({\r\n            content: newTaskContentTrimed,\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                ref={inputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    padding: 20px;\r\n    margin: 2px 5px;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    list-style-type: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 2px solid #eee;\r\n    margin-bottom: 10px;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    color: ${({ theme }) => theme.color.mineshaft};\r\n    overflow-wrap: anywhere;\r\n    word-break: break-word;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    margin-right: 10px;\r\n    color: ${({ theme }) => theme.color.gallery};\r\n    border: none;\r\n    width: 30px;\r\n    height: 30px;\r\n    font-size: 10px;\r\n    cursor: pointer;\r\n    transition: background-color .5s linear;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`   \r\n        background-color: ${({ theme }) => theme.color.forestGreen};\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(130%);\r\n        }\r\n    `}\r\n        \r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.crimson};\r\n\r\n        &:hover{\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:active{\r\n            filter: brightness(130%);\r\n        }\r\n    `}   \r\n`;","import { useSelector } from \"react-redux\";\r\nimport { selectTasks } from \"../tasksSlice\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst TaskList = ({ tasks, removeTask, toggleTaskDone }) => {\r\n    const { hideDone } = useSelector(selectTasks);\r\n\r\n    return (\r\n        <List>\r\n            {\r\n                tasks.map(task => (\r\n                    <Item\r\n                        key={task.id}\r\n                        hidden={task.done && hideDone}\r\n                    >\r\n                        <Button\r\n                            toggleDone\r\n                            onClick={() => toggleTaskDone(task.id)}\r\n                        >\r\n                            {task.done\r\n                                ? <i className='fas fa-check'></i>\r\n                                : \"\"}\r\n                        </Button>\r\n                        <Content\r\n                            done={task.done}\r\n                        >\r\n                            {task.content}\r\n                        </Content>\r\n                        <Button\r\n                            remove\r\n                            onClick={() => removeTask(task.id)}\r\n                        >\r\n                            <i className=\"fas fa-trash-alt\"></i>\r\n                        </Button>\r\n                    </Item>\r\n                ))\r\n            }\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-direction: column;\r\n        padding: 30px;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.teal};\r\n    font-size: 18px;\r\n    border: none;\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n    transition: color .5s linear;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        padding: 10px;\r\n    }\r\n\r\n    &:hover{\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active{\r\n        filter: brightness(130%);\r\n    }\r\n\r\n    &:disabled{\r\n        color: ${({ theme }) => theme.color.silver};\r\n        pointer-events: none; \r\n    }\r\n`;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone } from \"../tasksSlice\";\r\nimport { Wrapper, Button } from \"./styled\";\r\n\r\nconst Buttons = ({ setAllDone, tasks }) => {\r\n    const { hideDone } = useSelector(selectTasks);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <Wrapper>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button\r\n                        onClick={() => dispatch(toggleHideDone())}\r\n                    >\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                    </Button>\r\n                    <Button\r\n                        onClick={setAllDone}\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                    >\r\n                        Ukończ wszystkie\r\n                    </Button>\r\n                </>\r\n            )}\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin-top: 10px;\r\n    box-shadow: 0 0 3px ${({ theme }) => theme.color.gallery};\r\n`;\r\n\r\nexport const Header = styled.h2`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 15px;\r\n    margin: 2px 5px;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px){\r\n        flex-direction: column;\r\n    }\r\n`;","import { Wrapper, Header } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Wrapper>\r\n    <Header>\r\n      {title}\r\n      {extraHeaderContent}\r\n    </Header>\r\n    {body}\r\n  </Wrapper>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.header`\r\n    margin: 0px 5px;\r\n`;","import {StyledHeader} from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <StyledHeader>\r\n        <h1>{title}</h1>\r\n    </StyledHeader>\r\n)\r\n\r\nexport default Header;","const Container = ({ children }) => (\r\n    <main>\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import { useTasks } from '../../useTasks';\r\nimport { useSelector } from \"react-redux\";\r\nimport Form from \"./Form\";\r\nimport TaskList from \"./TaskList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../common/Container/Section\";\r\nimport Header from \"../../common/Container/Header\";\r\nimport Container from \"../../common/Container\";\r\nimport { selectTasks } from \"./tasksSlice\";\r\n\r\nfunction Tasks() {\r\n  const { tasks } = useSelector(selectTasks);\r\n  const {\r\n    removeTask,\r\n    toggleTaskDone,\r\n    setAllDone,\r\n  } = useTasks();\r\n\r\n\r\n  return (\r\n    <>\r\n      <Header\r\n        title=\"Lista zadań\"\r\n      />\r\n      <Container>\r\n        <Section\r\n          title=\"Dodaj nowe zadanie\"\r\n          body={\r\n            <Form />\r\n          }\r\n        />\r\n        <Section\r\n          title=\"Lista zadań\"\r\n          body={\r\n            <TaskList\r\n              tasks={tasks}\r\n              removeTask={removeTask}\r\n              toggleTaskDone={toggleTaskDone}\r\n            />\r\n          }\r\n          extraHeaderContent={\r\n            <Buttons\r\n              tasks={tasks}\r\n              setAllDone={setAllDone}\r\n            />\r\n          }\r\n        />\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","import Tasks from \"./features/tasks/Tasks\"\r\n\r\nexport const App = () => <Tasks />;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyle } from './GlobalStyle';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        mineshaft: \"#333\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}