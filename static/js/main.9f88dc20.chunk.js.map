{"version":3,"sources":["GlobalStyle.js","useTasks.js","Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Container/Header/styled.js","Container/Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","color","gallery","getInitialTasks","tasksFromLocalStorage","localStorage","getItem","JSON","parse","StyledForm","styled","form","white","breakpoint","mobileMax","Input","input","Button","button","teal","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","newTaskContentTrimed","trim","current","focus","value","onChange","target","ref","placeholder","List","ul","Item","li","hidden","css","Content","span","mineshaft","done","toggleDone","forestGreen","remove","crimson","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","onClick","id","className","content","Wrapper","div","silver","Buttons","toggleHideDone","setAllDone","length","disabled","every","section","Header","h2","Section","title","body","extraHeaderContent","StyledHeader","header","Container","children","App","setHideDone","setTasks","useEffect","setItem","stringify","filter","useTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","black","alto","document","getElementById"],"mappings":"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","file":"static/js/main.9f88dc20.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n        scroll-behavior: smooth;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        max-width: 1000px;\r\n        margin: 0 auto;\r\n        padding: 0 20px;\r\n        font-family: 'Montserrat', sans-serif;\r\n        background-color: ${({ theme }) => theme.color.gallery};\r\n    }\r\n`;","import { useEffect, useState } from 'react';\r\n\r\nconst getInitialTasks = () => {\r\n    const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\r\n\r\n    return tasksFromLocalStorage\r\n        ? JSON.parse(tasksFromLocalStorage)\r\n        : []\r\n};\r\n\r\nconst useTasks = () => {\r\n    const [tasks, setTasks] = useState(getInitialTasks);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    }, [tasks]);\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id));\r\n    };\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done };\r\n            };\r\n\r\n            return task;\r\n        }))\r\n    };\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task => ({\r\n            ...task,\r\n            done: true,\r\n        })));\r\n    };\r\n\r\n    const addNewTask = (content) => {\r\n        setTasks(tasks => [\r\n            ...tasks,\r\n            {\r\n                content,\r\n                done: false,\r\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n            },\r\n        ]);\r\n    };\r\n\r\n    return {\r\n        tasks,\r\n        removeTask,\r\n        toggleTaskDone,\r\n        setAllDone,\r\n        addNewTask,\r\n    };\r\n};\r\n\r\nexport { useTasks };","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 10px;\r\n    padding: 20px;\r\n    margin: 2px 5px;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n\r\n    @media(max-width: ${({ theme }) => theme.breakpoint.mobileMax}px){\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 8px;\r\n    border: 1px solid ${({ theme }) => theme.color.gallery};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 8px;\r\n    border: none;\r\n    background-color:  ${({ theme }) => theme.color.teal};\r\n    color:  ${({ theme }) => theme.color.gallery};\r\n    cursor: pointer;\r\n    transition: background-color .5s linear, transform .2s linear;\r\n\r\n    &:hover{\r\n        filter: brightness(110%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        filter: brightness(120%);\r\n    }\r\n`;","import { useState, useRef } from \"react\";\r\nimport { StyledForm, Input, Button } from \"./styled\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newTaskContentTrimed = newTaskContent.trim();\r\n\r\n        if (!newTaskContentTrimed) {\r\n            return;\r\n        };\r\n\r\n        addNewTask(newTaskContentTrimed);\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <Input\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                ref={inputRef}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n            />\r\n            <Button>Dodaj zadanie</Button>\r\n        </StyledForm>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    padding: 20px;\r\n    margin: 2px 5px;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n    list-style-type: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 2px solid #eee;\r\n    margin-bottom: 10px;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    color: ${({ theme }) => theme.color.mineshaft};\r\n    overflow-wrap: anywhere;\r\n    word-break: break-word;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    margin-right: 10px;\r\n    color: ${({ theme }) => theme.color.gallery};\r\n    border: none;\r\n    width: 30px;\r\n    height: 30px;\r\n    font-size: 10px;\r\n    cursor: pointer;\r\n    transition: background-color .5s linear;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`   \r\n        background-color: ${({ theme }) => theme.color.forestGreen};\r\n\r\n        &:hover {\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:active {\r\n            filter: brightness(130%);\r\n        }\r\n    `}\r\n        \r\n    ${({ remove }) => remove && css`\r\n        background-color: ${({ theme }) => theme.color.crimson};\r\n\r\n        &:hover{\r\n            filter: brightness(110%);\r\n        }\r\n\r\n        &:active{\r\n            filter: brightness(130%);\r\n        }\r\n    `}   \r\n`;","import { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <List>\r\n        {\r\n            tasks.map(task => (\r\n                <Item\r\n                    key={task.id}\r\n                    hidden={task.done && hideDone}\r\n                >\r\n                    <Button\r\n                        toggleDone\r\n                        onClick={() => toggleTaskDone(task.id)}\r\n                    >\r\n                        {task.done\r\n                            ? <i className='fas fa-check'></i>\r\n                            : \"\"}\r\n                    </Button>\r\n                    <Content\r\n                        done={task.done}\r\n                    >\r\n                        {task.content}\r\n                    </Content>\r\n                    <Button\r\n                        remove\r\n                        onClick={() => removeTask(task.id)}\r\n                    >\r\n                        <i className=\"fas fa-trash-alt\"></i>\r\n                    </Button>\r\n                </Item>\r\n            ))\r\n        }\r\n    </List>\r\n)\r\n\r\nexport default Tasks;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        flex-direction: column;\r\n        padding: 30px;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    color: ${({ theme }) => theme.color.teal};\r\n    font-size: 18px;\r\n    border: none;\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n    transition: color .5s linear;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n        padding: 10px;\r\n    }\r\n\r\n    &:hover{\r\n        filter: brightness(110%);\r\n    }\r\n\r\n    &:active{\r\n        filter: brightness(130%);\r\n    }\r\n\r\n    &:disabled{\r\n        color: ${({ theme }) => theme.color.silver};\r\n        pointer-events: none; \r\n    }\r\n`;","import { Wrapper, Button } from \"./styled\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    <Wrapper>\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <Button \r\n                    onClick={toggleHideDone}\r\n                >\r\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                </Button>\r\n                <Button\r\n                    onClick={setAllDone}\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    Ukończ wszystkie\r\n                </Button>\r\n            </>\r\n        )}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin-top: 10px;\r\n    box-shadow: 0 0 3px ${({ theme }) => theme.color.gallery};\r\n`;\r\n\r\nexport const Header = styled.h2`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding: 15px;\r\n    margin: 2px 5px;\r\n    background-color: ${({ theme }) => theme.color.white};\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px){\r\n        flex-direction: column;\r\n    }\r\n`;","import { Wrapper, Header } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Wrapper>\r\n    <Header>\r\n      {title}\r\n      {extraHeaderContent}\r\n    </Header>\r\n    {body}\r\n  </Wrapper>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.header`\r\n    margin: 0px 5px;\r\n`;","import {StyledHeader} from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n    <StyledHeader>\r\n        <h1>{title}</h1>\r\n    </StyledHeader>\r\n)\r\n\r\nexport default Header;","const Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import { useState } from 'react';\nimport { useTasks } from './useTasks';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Container/Header\";\nimport Container from \"./Container\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const {\n    tasks,\n    removeTask,\n    toggleTaskDone,\n    setAllDone,\n    addNewTask,\n  } = useTasks();\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone)\n  };\n\n  return (\n    <>\n      <Header\n        title=\"Lista zadań\"\n      />\n      <Container>\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={\n            <Form addNewTask={addNewTask} />\n          }\n        />\n        <Section\n          title=\"Lista zadań\"\n          body={\n            <Tasks\n              tasks={tasks}\n              hideDone={hideDone}\n              removeTask={removeTask}\n              toggleTaskDone={toggleTaskDone}\n            />\n          }\n          extraHeaderContent={\n            <Buttons\n              tasks={tasks}\n              hideDone={hideDone}\n              toggleHideDone={toggleHideDone}\n              setAllDone={setAllDone}\n            />\n          }\n        />\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyle } from './GlobalStyle';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { theme } from \"./theme\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        black: \"#000\",\r\n        mineshaft: \"#333\",\r\n        silver: \"#ccc\",\r\n        alto: \"#ddd\",\r\n        gallery: \"#eee\",\r\n        white: \"#fff\",\r\n        teal: \"#008080\",\r\n        crimson: \"#db143c\",\r\n        forestGreen: \"#228c22\",\r\n    },\r\n    breakpoint: {\r\n        mobileMax: 767,\r\n    },\r\n};"],"sourceRoot":""}