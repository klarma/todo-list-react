{"version":3,"sources":["useTasks.js","Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Container/Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["getInitialTasks","tasksFromLocalStorage","localStorage","getItem","JSON","parse","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","className","onSubmit","event","preventDefault","newTaskContentTrimed","trim","current","focus","value","onChange","target","ref","placeholder","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","onClick","id","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","setHideDone","setTasks","useEffect","setItem","stringify","filter","useTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acd701bb.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nconst getInitialTasks = () => {\r\n    const tasksFromLocalStorage = localStorage.getItem(\"tasks\");\r\n\r\n    return tasksFromLocalStorage\r\n        ? JSON.parse(tasksFromLocalStorage)\r\n        : []\r\n};\r\n\r\nconst useTasks = () => {\r\n    const [tasks, setTasks] = useState(getInitialTasks);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    }, [tasks]);\r\n\r\n    const removeTask = (id) => {\r\n        setTasks(tasks => tasks.filter(task => task.id !== id));\r\n    };\r\n\r\n    const toggleTaskDone = (id) => {\r\n        setTasks(tasks => tasks.map(task => {\r\n            if (task.id === id) {\r\n                return { ...task, done: !task.done };\r\n            };\r\n\r\n            return task;\r\n        }))\r\n    };\r\n\r\n    const setAllDone = () => {\r\n        setTasks(tasks => tasks.map(task => ({\r\n            ...task,\r\n            done: true,\r\n        })));\r\n    };\r\n\r\n    const addNewTask = (content) => {\r\n        setTasks(tasks => [\r\n            ...tasks,\r\n            {\r\n                content,\r\n                done: false,\r\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n            },\r\n        ]);\r\n    };\r\n\r\n    return {\r\n        tasks,\r\n        removeTask,\r\n        toggleTaskDone,\r\n        setAllDone,\r\n        addNewTask,\r\n    };\r\n};\r\n\r\nexport { useTasks };","import { useState, useRef } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newTaskContentTrimed = newTaskContent.trim();\r\n\r\n        if (!newTaskContentTrimed) {\r\n            return;\r\n        };\r\n\r\n        addNewTask(newTaskContentTrimed);\r\n        setNewTaskContent(\"\");\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                value={newTaskContent}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                ref={inputRef}\r\n                className=\"form__input\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n            />\r\n            <button className=\"form__button\">Dodaj zadanie</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default Form;","import \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <ul className=\"tasks\">\r\n        {\r\n            tasks.map(task => (\r\n                <li\r\n                    key={task.id}\r\n                    className={`tasks__item${task.done && hideDone\r\n                        ? \" tasks__item--hide\"\r\n                        : \"\"}`\r\n                    }\r\n                >\r\n                    <button\r\n                        className=\"tasks__button tasks__button--done\"\r\n                        onClick={() => toggleTaskDone(task.id)}\r\n                    >\r\n                        {task.done\r\n                            ? <i className='fas fa-check'></i>\r\n                            : \"\"}\r\n                    </button>\r\n                    <span\r\n                        className={\r\n                            `tasks__spanTask${task.done\r\n                                ? \" tasks__spanTask--done\"\r\n                                : \"\"}`\r\n                        }\r\n                    >\r\n                        {task.content}\r\n                    </span>\r\n                    <button\r\n                        className=\"tasks__button\"\r\n                        onClick={() => removeTask(task.id)}\r\n                    >\r\n                        <i className=\"fas fa-trash-alt\"></i>\r\n                    </button>\r\n                </li>\r\n            ))\r\n        }\r\n    </ul>\r\n)\r\n\r\nexport default Tasks;","import \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    <div className=\"buttons\">\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <button onClick={toggleHideDone} className=\"buttons__button\">\r\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                </button>\r\n                <button\r\n                    className=\"buttons__button\"\r\n                    onClick={setAllDone}\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                >\r\n                    Ukończ wszystkie\r\n                </button>\r\n            </>\r\n        )}\r\n    </div>\r\n);\r\n\r\nexport default Buttons;","import \"./style.css\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <section className=\"section\">\r\n    <h2 className=\"section__header\">\r\n      {title}\r\n      {extraHeaderContent}\r\n    </h2>\r\n    {body}\r\n  </section>\r\n);\r\n\r\nexport default Section;","import \"./style.css\";\r\n\r\nconst Header = ({ title }) => (\r\n    <header className=\"header\">\r\n        <h1>{title}</h1>\r\n    </header>\r\n)\r\n\r\nexport default Header;","const Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import { useState } from 'react';\nimport { useTasks } from './useTasks';\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Container/Header\";\nimport Container from \"./Container\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const {\n    tasks,\n    removeTask,\n    toggleTaskDone,\n    setAllDone,\n    addNewTask,\n  } = useTasks();\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone)\n  };\n\n  return (\n    <>\n      <Header\n        title=\"Lista zadań\"\n      />\n      <Container>\n        <Section\n          title=\"Dodaj nowe zadanie\"\n          body={\n            <Form addNewTask={addNewTask} />\n          }\n        />\n        <Section\n          title=\"Lista zadań\"\n          body={\n            <Tasks\n              tasks={tasks}\n              hideDone={hideDone}\n              removeTask={removeTask}\n              toggleTaskDone={toggleTaskDone}\n            />\n          }\n          extraHeaderContent={\n            <Buttons\n              tasks={tasks}\n              hideDone={hideDone}\n              toggleHideDone={toggleHideDone}\n              setAllDone={setAllDone}\n            />\n          }\n        />\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}